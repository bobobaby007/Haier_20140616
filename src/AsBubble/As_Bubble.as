//------updataed 20111215----bobobaby007@hotmail.com/*---how to use	var _text:As_Bubble=new As_Bubble()	_text._hasHorn=false	_text._controllerColor=0x4987B4	_text._embedFonts=true	_text._defaultTextFont="Hei Regular"	_text._TextColor=0xffffff	_text._defaultText="双击编辑文字"*//*			TextChanger.Font_CN="SimHei"			TextChanger.Font_EN="SimHei"			//var _text:As_Bubble=new As_Bubble()			_textRect._hasHorn=false			_textRect._controllerColor=0x4987B4			_textRect._embedFonts=false			_textRect._defaultTextFont="SimHei"						_textRect._defaultText="双击编辑文字"			_textRect._bgAlpha=0						addChild(_textRect)						_textRect.mask=_mask_text_mc									_textRect.x=150			_textRect.y=200			_textRect._TextColor=0x6e2d02			_textRect._Width=50			_textRect._TextSize=20			_textRect.addEventListener(As_Bubble.EVENT_FOCUSIN,textRectHander)			_textRect.addEventListener(As_Bubble.EVENT_FOCUSOUT,textRectHander)			_textRect.addEventListener(MouseEvent.MOUSE_OVER,textRectMouseHander)			_textRect.addEventListener(MouseEvent.MOUSE_OUT,textRectMouseHander)*/package  AsBubble{	import flash.display.MovieClip		import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldType	import flash.text.TextFieldAutoSize	import flash.geom.Rectangle;	import flash.display.DisplayObject;	import flash.geom.Point;	import flash.text.TextFormatAlign	import flash.text.TextFormat;	import flash.text.Font	public class As_Bubble extends MovieClip{		static public var EVENT_FOCUSIN:String="EVENT_FOCUSIN"		static public var EVENT_FOCUSOUT:String="EVENT_FOCUSOUT"		public var _lineColor:Number=0x00		public var _lineThickness:Number=2		public var _bgColor:Number=0xffffff		public var _bgAlpha:Number=0.8		public var _controllerColor:Number=0xff0000		public var _defaultWidth:Number=200		public var _defaultHeight:Number=100		public var _defaultHornLength:Number=20		public var _defaultHornWidth:Number=10		public var _defaultCornerRadius:Number=10		public var _maxWidth:Number=400		public var _maxHeight:Number=300		public var _defaultText:String=""		public var _defaultTextSize:Number=20		public var _defaultTextFont:String		public var _hasHorn:Boolean=true		public var _heightOffset:Number=-14		public var _embedFonts:Boolean=false				private var _controller_left:MovieClip=new MovieClip		private var _controller_right:MovieClip=new MovieClip		private var _controller_top:MovieClip=new MovieClip		private var _controller_bottom:MovieClip=new MovieClip		private var _controller_horn:MovieClip=new MovieClip		private var _controllerContainer:MovieClip=new MovieClip		private var _textFormat:TextFormat=new TextFormat		private var _height:Number		private var _width:Number				private var _clickedController:MovieClip		public var _bg:MovieClip=new MovieClip		public var _inputText:TextField=new TextField		private var _focusIn:Boolean=false		private var _clickTime:Number		private var _textSize:Number		private var _setUped:Boolean=false		static private var _allBubbles:Array=new Array()		static private var _focusedBubble:As_Bubble 								public function As_Bubble() {			this.addEventListener(Event.ADDED_TO_STAGE,addToStageHander)			this.addEventListener(Event.REMOVED_FROM_STAGE,addToStageHander)		}		private function addToStageHander(event:Event){			if(!_setUped){				setUp()				render()			}						_allBubbles.push(this)						FocusIn=false			//FocusedBubble=this			stage.addEventListener(MouseEvent.CLICK,stageHander)		}		private function stageHander(event:MouseEvent){			var _p:Point=new Point(mouseX,mouseY)			_p=this.localToGlobal(_p)						var _hitAtAnyBubble:Boolean=false			for(var i:int=0;i<_allBubbles.length;i++){				var _bubble:As_Bubble=_allBubbles[i] as As_Bubble				if(_bubble.hitTestPoint(_p.x,_p.y,true)){					_hitAtAnyBubble=true					break				}			}			if(_hitAtAnyBubble){							}else{				FocusedBubble=null			}								}				private function removeFromStage(event:Event){			_allBubbles.splice(_allBubbles.indexOf(this),1)		}		private function setUp(){			_inputText.type=TextFieldType.INPUT						_textFormat.align=TextFormatAlign.LEFT									_inputText.wordWrap=true			_inputText.multiline=true			_inputText.width=200			_inputText.height=100									if(_defaultTextFont){												//var _arr:Array = new Array();								//_arr = Font.enumerateFonts(false);								_textFormat.font = _defaultTextFont;								//for (var i:int=0;i<_arr.length;i++){					//trace(_arr[i].fontName)				//}								//_textFormat.font=_defaultTextFont			}						if(_embedFonts){				_inputText.embedFonts=true			}						_textFormat.size=_defaultTextSize			_inputText.defaultTextFormat=_textFormat									_inputText.text=_defaultText			_inputText.setTextFormat(_textFormat)									drawController(_controller_left)			drawController(_controller_right)			drawController(_controller_top)			drawController(_controller_bottom)			drawController(_controller_horn)						_controller_bottom.visible=false			_controller_top.visible=false						_controller_left.x=-0.5*_defaultWidth			_controller_left.y=-0.5*_defaultHeight-_defaultHornLength			_controller_right.x=0.5*_defaultWidth			_controller_right.y=-0.5*_defaultHeight-_defaultHornLength			_controller_top.x=0			_controller_top.y=-_defaultHeight-_defaultHornLength			_controller_bottom.x=0			_controller_bottom.y=-_defaultHornLength									_controllerContainer.addChild(_controller_left)			_controllerContainer.addChild(_controller_right)			_controllerContainer.addChild(_controller_top)			_controllerContainer.addChild(_controller_bottom)						if(_hasHorn){				_controllerContainer.addChild(_controller_horn)			}									addChild(_bg)			addChild(_inputText)						addChild(_controllerContainer)									_bg.addEventListener(MouseEvent.MOUSE_DOWN,btnHander)				_controller_left.addEventListener(MouseEvent.MOUSE_DOWN,btnHander)			_controller_right.addEventListener(MouseEvent.MOUSE_DOWN,btnHander)			_controller_top.addEventListener(MouseEvent.MOUSE_DOWN,btnHander)			_controller_bottom.addEventListener(MouseEvent.MOUSE_DOWN,btnHander)			_controller_horn.addEventListener(MouseEvent.MOUSE_DOWN,btnHander)							this.addEventListener(MouseEvent.MOUSE_DOWN,btnHander)			_inputText.addEventListener(Event.CHANGE,textHander)									_Height=_inputText.textHeight		}		private function drawController(__target:MovieClip){			__target.graphics.beginFill(_controllerColor)			__target.graphics.lineStyle(1,0x00)			__target.graphics.drawRect(-5,-5,10,10)			__target.graphics.endFill()		}		private function enterFrameHander(event:Event){			drawing()		}		private function btnHander(event:MouseEvent){			var _m=event.currentTarget			var _rect:Rectangle=new Rectangle			switch(_m){				case this:					var _date:Date=new Date					if(_date.time-_clickTime<400){						FocusedBubble=this					}else{						if(FocusedBubble!=this){							this.startDrag()																			stage.addEventListener(MouseEvent.MOUSE_UP,btnHander)						}											}					_clickTime=_date.time								break				case _bg:					this.startDrag()										stage.addEventListener(MouseEvent.MOUSE_UP,btnHander)				break				case _controller_left:					_clickedController=_m					_rect.x=_controller_right.x-4*_defaultCornerRadius					_rect.y=_controller_right.y					_rect.width=-_maxWidth					_rect.height=0					_controller_left.startDrag(true,_rect)					stage.addEventListener(MouseEvent.MOUSE_MOVE,btnHander)					stage.addEventListener(MouseEvent.MOUSE_UP,btnHander)				break				case _controller_right:					_clickedController=_m					_rect.x=_controller_left.x+4*_defaultCornerRadius					_rect.y=_controller_left.y					_rect.width=_maxWidth					_rect.height=0					_controller_right.startDrag(true,_rect)					stage.addEventListener(MouseEvent.MOUSE_MOVE,btnHander)					stage.addEventListener(MouseEvent.MOUSE_UP,btnHander)				break				case _controller_top:					_clickedController=_m					_rect.y=_controller_bottom.y-4*_defaultCornerRadius					_rect.x=_controller_bottom.x					_rect.width=0					_rect.height=-_maxHeight					_controller_top.startDrag(true,_rect)								stage.addEventListener(MouseEvent.MOUSE_MOVE,btnHander)					stage.addEventListener(MouseEvent.MOUSE_UP,btnHander)				break				case _controller_bottom:					_clickedController=_m					_rect.y=_controller_top.y+4*_defaultCornerRadius					_rect.x=_controller_top.x					_rect.width=0					_rect.height=_maxHeight					_controller_bottom.startDrag(true,_rect)								stage.addEventListener(MouseEvent.MOUSE_MOVE,btnHander)					stage.addEventListener(MouseEvent.MOUSE_UP,btnHander)				break				case _controller_horn:					_clickedController=_m					_m.startDrag()								stage.addEventListener(MouseEvent.MOUSE_MOVE,btnHander)					stage.addEventListener(MouseEvent.MOUSE_UP,btnHander)				break				case stage:					switch(event.type){						case MouseEvent.MOUSE_UP:														stopDrag()							stage.removeEventListener(MouseEvent.MOUSE_UP,btnHander)							stage.removeEventListener(MouseEvent.MOUSE_MOVE,btnHander)							render()						break						case MouseEvent.MOUSE_MOVE:							render()						break					}									break			}		}		public function render(){			_inputText.x=_controller_left.x+10			_inputText.y=_controller_top.y+10			_inputText.width=_controller_right.x-_controller_left.x-20						_controller_bottom.y=_inputText.textHeight-_defaultHeight+2*_defaultCornerRadius+_heightOffset						_inputText.height=_controller_bottom.y-_controller_top.y//-20												//if(_clickedController!=_controller_left){				_controller_left.y=_controller_top.y+0.5*(_controller_bottom.y-_controller_top.y)			//}			//if(_clickedController!=_controller_right){				_controller_right.y=_controller_top.y+0.5*(_controller_bottom.y-_controller_top.y)			//}			//if(_clickedController!=_controller_top){				_controller_top.x=_controller_left.x+0.5*(_controller_right.x-_controller_left.x)			//}			//if(_clickedController!=_controller_bottom){				_controller_bottom.x=_controller_left.x+0.5*(_controller_right.x-_controller_left.x)			//}			drawing()		}		private function drawing(){									_controllerContainer.graphics.clear()			_controllerContainer.graphics.lineStyle(1,_controllerColor,0.5)						_controllerContainer.graphics.drawRect(_controller_left.x,_controller_top.y,_controller_right.x-_controller_left.x,_controller_bottom.y-_controller_top.y)					_bg.graphics.clear()			_bg.graphics.beginFill(_bgColor,_bgAlpha)			_bg.graphics.lineStyle(_lineThickness,_lineColor,0)						var _points:Array=new Array						_points.push({point:new Point(_controller_left.x+_defaultCornerRadius,_controller_bottom.y),controlPoint:new Point(_controller_left.x-_defaultCornerRadius,_controller_bottom.y)})						_points.push({point:new Point(_controller_left.x,_controller_bottom.y-_defaultCornerRadius),controlPoint:new Point(_controller_left.x,_controller_bottom.y)})						_points.push({point:new Point(_controller_left.x,_controller_top.y+_defaultCornerRadius),controlPoint:new Point(_controller_left.x,_controller_top.y+_defaultCornerRadius)})			_points.push({point:new Point(_controller_left.x+_defaultCornerRadius,_controller_top.y),controlPoint:new Point(_controller_left.x,_controller_top.y)})						_points.push({point:new Point(_controller_right.x-_defaultCornerRadius,_controller_top.y),controlPoint:new Point(_controller_right.x-_defaultCornerRadius,_controller_top.y)})			_points.push({point:new Point(_controller_right.x,_controller_top.y+_defaultCornerRadius),controlPoint:new Point(_controller_right.x,_controller_top.y)})						_points.push({point:new Point(_controller_right.x,_controller_bottom.y-_defaultCornerRadius),controlPoint:new Point(_controller_right.x,_controller_bottom.y-_defaultCornerRadius)})			_points.push({point:new Point(_controller_right.x-_defaultCornerRadius,_controller_bottom.y),controlPoint:new Point(_controller_right.x,_controller_bottom.y)})										var _hornPoints:Array=new Array			if(_hasHorn){				_hornPoints.push({point:new Point(_controller_horn.x,_controller_horn.y),controlPoint:new Point(_controller_horn.x,_controller_horn.y)})			}									var _insetNum:int=8						if(_controller_horn.x<_controller_left.x){								//------------------------------------------------------------left				_hornPoints.splice(0,0,{point:new Point(_controller_left.x,_controller_left.y-_defaultHornWidth),controlPoint:new Point(_controller_left.x,_controller_left.y-_defaultHornWidth)})				_hornPoints.splice(2,0,{point:new Point(_controller_left.x,_controller_left.y+_defaultHornWidth),controlPoint:new Point(_controller_left.x,_controller_left.y+_defaultHornWidth)})				_insetNum=2			}else if(_controller_horn.x>=_controller_left.x&&_controller_horn.x<=_controller_right.x){				if(_controller_horn.y<_controller_top.y){					//------------------------------------------------------------top					_hornPoints.splice(0,0,{point:new Point(_controller_top.x+_defaultHornWidth,_controller_top.y),controlPoint:new Point(_controller_top.x+_defaultHornWidth,_controller_top.y)})					_hornPoints.splice(2,0,{point:new Point(_controller_top.x-_defaultHornWidth,_controller_top.y),controlPoint:new Point(_controller_top.x-_defaultHornWidth,_controller_top.y)})									_insetNum=4				}else if(_controller_horn.y>_controller_bottom.y){					//------------------------------------------------------------bottom					_hornPoints.splice(0,0,{point:new Point(_controller_bottom.x-_defaultHornWidth,_controller_bottom.y),controlPoint:new Point(_controller_bottom.x-_defaultHornWidth,_controller_bottom.y)})					_hornPoints.splice(2,0,{point:new Point(_controller_bottom.x+_defaultHornWidth,_controller_bottom.y),controlPoint:new Point(_controller_bottom.x+_defaultHornWidth,_controller_bottom.y)})					_insetNum=8				}else{					//--------------------------------------center										_insetNum=-1				}							}else{				//------------------------------------------------------------right				_hornPoints.splice(0,0,{point:new Point(_controller_right.x,_controller_right.y+_defaultHornWidth),controlPoint:new Point(_controller_right.x,_controller_right.y+_defaultHornWidth)})				_hornPoints.splice(2,0,{point:new Point(_controller_right.x,_controller_right.y-_defaultHornWidth),controlPoint:new Point(_controller_right.x,_controller_right.y-_defaultHornWidth)})				_insetNum=6			}			if(_insetNum!=-1){				for(var i:int=0;i<_hornPoints.length;i++){				_points.splice(_insetNum,0,_hornPoints[i])								}			}						linkPoints(_bg,_points)			_bg.graphics.endFill()		}		private function linkPoints(__object:MovieClip, __points:Array){			__object.graphics.moveTo(__points[0].point.x,__points[0].point.y)						for(var i:int=1;i<__points.length;i++){					__object.graphics.curveTo(__points[i].controlPoint.x,__points[i].controlPoint.y,__points[i].point.x,__points[i].point.y)			}					}		public function set FocusIn(__set:Boolean){			_focusIn=__set			if(_focusIn){				var _m=this.parent				//_m.addChild(this)				_controllerContainer.visible=true				_inputText.selectable=true								if(_inputText.text==_defaultText){					_inputText.text=""				}				this.dispatchEvent(new Event(EVENT_FOCUSIN))			}else{				_controllerContainer.visible=false				_inputText.selectable=false								if(_inputText.text==""){					_inputText.text=_defaultText				}				this.dispatchEvent(new Event(EVENT_FOCUSOUT))			}		}		public function _EnEditing(){			_inputText.setSelection(0,0)		}		public function get FocusIn():Boolean{			return _focusIn		}		public function set _TextColor(__set:Number){									if(_inputText.selectionEndIndex>_inputText.selectionBeginIndex){				var _newFormat:TextFormat=new TextFormat()				_newFormat.color=__set								_inputText.setTextFormat(_newFormat,_inputText.selectionBeginIndex,_inputText.selectionEndIndex)			}else{				_textFormat.color=__set				_inputText.setTextFormat(_textFormat)				_inputText.defaultTextFormat=_textFormat			}						TextChanger._Self._changeText(_inputText,_textSize+4)					}		public function set _TextSize(__set:Number){			_textSize=__set						if(_inputText.selectionEndIndex>_inputText.selectionBeginIndex){				var _newFormat:TextFormat=new TextFormat()				_newFormat.size=__set								_inputText.setTextFormat(_newFormat,_inputText.selectionBeginIndex,_inputText.selectionEndIndex)			}else{				_textFormat.size=__set				_inputText.setTextFormat(_textFormat)				_inputText.defaultTextFormat=_textFormat			}			//_Width=_inputText.textWidth			TextChanger._Self._changeText(_inputText,_textSize+4)			_Height=_inputText.textHeight					}		public function get _TextSize():Number{			return _textSize		}		private function textHander(event:Event){			TextChanger._Self._changeText(_inputText,_textSize+4)			_Height=_inputText.textHeight		}				static public function set FocusedBubble(__set:As_Bubble){			_focusedBubble=__set			//trace(_focusedBubble)			for(var i:int=0;i<_allBubbles.length;i++){				var _bubble:As_Bubble=_allBubbles[i] as As_Bubble				if(_bubble==_focusedBubble){					_bubble.FocusIn=true				}else{					_bubble.FocusIn=false					_bubble._EnEditing()				}			}		}		public function set _Width(__set:Number){			_width=__set			_controller_right.x=__set			render()		}		public function get _Width():Number{			return _width		}		public function get _StartPoint():Point{			//_controller_left.x,_controller_top.y			var _point:Point=new Point(this.x+_controller_left.x,this.y+_controller_top.y)			return _point		}		public function set _Height(__set:Number){			_height=__set			_controller_bottom.y=__set-_defaultHeight+2*_defaultCornerRadius+_heightOffset						render()		}		public function get _Height():Number{			return _height		}		public function get _Text():String{			return _inputText.text		}		static public function get FocusedBubble():As_Bubble{			return _focusedBubble		}				//------------------------------------end	}	}