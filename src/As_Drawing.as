package  {		import flash.filters.DisplacementMapFilterMode;    import flash.filters.DisplacementMapFilter;		import flash.display.Sprite	import flash.events.Event	import flash.display.DisplayObject;	import flash.events.MouseEvent;	import flash.display.BlendMode	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.geom.ColorTransform;	import flash.geom.Matrix;	import flash.geom.Point	import flash.display.Graphics		import flash.filters.BlurFilter;	import flash.display.MovieClip;		import gs.TweenLite	import gs.easing.Bounce		import flash.geom.Transform;	import flash.filters.GlowFilter;	public class As_Drawing extends Sprite{		private var _drawObject:Sprite=new Sprite				private var _drawParticle:Sprite=new Sprite				private var _drawPoint:Sprite=new Sprite		private var _w:Number=1024		private var _h:Number=600		private var _drawing:Boolean=false		//private var _drawingBoard:Sprite=new Sprite		private var _draw:Sprite=new Sprite		private var _bitmapData:BitmapData		private var _preDrawData:BitmapData				private var _bitmap_draw:Bitmap=new Bitmap()				private var _colorTrans:ColorTransform=new ColorTransform		private var _matrix:Matrix=new Matrix		private var _points:Array=new Array()				private var _stayPoint:Point				private var _blurFilter:BlurFilter=new BlurFilter()				private var _clearM:Sprite=new Sprite		private var _speed:Number=0		private var _toSpeed:Number=0				private var _available:Boolean=true		private var _circleR:Number=0		private var _circleRadius:Number=20		private var _isAirBrush:Boolean=false		private var  _cloneBitMapData:BitmapData				private var _style:String="normal"				private var _rotationChangeable:Boolean=false				static public var _style_normal:String="normal"		static public var _style_out:String="out"		static public var _style_circle:String="circle"				private var _clearable=true				private var _paper				private var _isDry:Boolean=true				private var _eraseObject:Sprite=new Sprite		private var _eraseParticle:Sprite=new Sprite				private var _speedStrong:Number=0.8				private var _size:Number=20				private var _maxScale:Number=1		private var _scaleOut:Boolean=false		private var _scaleAble:Boolean=false				public var _defaultDrawSprite:drawSprite				static public var _asDrawing:As_Drawing		private var _color:Number=0x00						private var _scale:Number=1				private var _alpha:Number=1		private var _glowFilter:GlowFilter=new GlowFilter()		private var _alphaTrans:ColorTransform=new ColorTransform()						static public var _outOfStage:Boolean=false								private var _texture:BitmapData				public function As_Drawing() {				_asDrawing=this			this.addEventListener(Event.ADDED_TO_STAGE,addToStageHander)					}		private function addToStageHander(event:Event){						setUp()			_defaultDrawSprite=new drawSprite()			addChild(_defaultDrawSprite)			//_defaultDrawSprite.visible=false						//addChild(_drawPoint)			_drawPoint.visible=false						//_MaxScale=0.5			DrawObject=_defaultDrawSprite			//this.Scale=3		}		private function setUp(){						addChild(_draw)						_w=GlobalVar._mainWidth			_h=GlobalVar._mainHeight												_bitmapData=new BitmapData(_w,_h,true,0)			_preDrawData=new BitmapData(_w,_h,true,0)						_blurFilter.blurX=_blurFilter.blurY=2						  var map:BitmapData = new BitmapData(_w, _h);             map.perlinNoise(84, 84, 5, Math.random()*100, false, true, 1, true);						//_draw.filters=[_blurFilter,new DisplacementMapFilter(map, new Point(), 1, 1, 64, 64, DisplacementMapFilterMode.CLAMP)]					//_draw.blendMode=BlendMode.ADD						_bitmap_draw.smoothing=true			_bitmap_draw.bitmapData=_bitmapData																		_draw.addChild(_bitmap_draw)											_clearM.graphics.clear()			_clearM.graphics.beginFill(0xff)			_clearM.graphics.drawRect(0,0,_w,_h)									stage.addEventListener(MouseEvent.MOUSE_DOWN,stageMouseHander)						}				private function stageMouseHander(event:MouseEvent){			switch(event.type){				case MouseEvent.MOUSE_DOWN:										if(_outOfStage){						return					}										var _p:Point=new Point(mouseX,mouseY)					_p=this.localToGlobal(_p)					if(!_bitmap_draw.hitTestPoint(_p.x,_p.y)){						return					}																			startDrawing()										stage.addEventListener(MouseEvent.MOUSE_MOVE,stageMouseHander)						stage.addEventListener(MouseEvent.MOUSE_UP,stageMouseHander)				break				case MouseEvent.MOUSE_MOVE:					_drawPoint.x=mouseX					_drawPoint.y=mouseY							if(Available){						if(_clearable){							clearDrawing()						}						//						drawing()					}				break				case MouseEvent.MOUSE_UP:					stopDrawing()					stage.removeEventListener(MouseEvent.MOUSE_MOVE,stageMouseHander)						stage.removeEventListener(MouseEvent.MOUSE_UP,stageMouseHander)				break			}		}				public function startDrawing(){			if(_scaleAble){				_scale=0			}else{				_scale=_maxScale			}									_speed=0			_drawPoint.x=mouseX			_drawPoint.y=mouseY						_stayPoint=new Point(_drawPoint.x,_drawPoint.y)			_points=new Array()			_drawing=true									}		public function stopDrawing(){			this.dispatchEvent(new Event("beforeStopDrawing"))			_drawing=false			clearDrawing()		}			public function set _Texture(__set:BitmapData){			_texture=__set		}		//-----------------------------drawing		private function drawing(){						//clearDrawing()			var _p:Point=new Point(_drawPoint.x,_drawPoint.y)									if(_points.length<1){				_points[0]=_p				curve(_points[0],_points[0],_points[0])				return			}			if(_points.length<2){				_points[1]=_p				curve(_points[0],_points[0],_points[1])				return			}					var _d:Number=Point.distance(_points[1],_p)						if(_d<1){				//return			}						_toSpeed=_d						var _r:Number=Math.acos((_p.x-_points[1].x)/_d)						if(!_r){				_r=0			}							if(_p.y-_points[1].y<0){				_r=-_r			}						var _d0:Number=Point.distance(_points[1],_points[0])										var _r0:Number=Math.acos((_points[1].x-_points[0].x)/_d0)						if(!_r0){				_r0=0			}							if(_points[1].y-_points[0].y<0){				_r0=-_r0			}						if(Math.abs(_r0-_r)<0.1*Math.PI){				_r0=_r			}						_d0=Math.min(_d0,_d)			_d0=0.5*_d						var _p_offet:Point=Point.polar(_d0,_r0)			var _p1:Point=new Point(_points[1].x,_points[1].y)			_p1.offset(_p_offet.x,_p_offet.y)									var _p0:Point=new Point(_points[1].x,_points[1].y)									curve(_p0,_p1,_p)						_points[0]=_p1					_points[1]=new Point(_p.x,_p.y)		}				function curve(pt0,pt1,pt2){		　　var pos_x;		　　var pos_y;				// drawParticle(new Point(pt2.x,pt2.y))			  var _d:Number=0.8*Point.distance(pt0,pt2)			   _d=Math.max(1,_d)			   //trace(_d)			   //_d=50			   var _gap:Number=(_toSpeed-_speed)/_d		　　for(var i=0;i<=1;i+=1/_d){			　 pos_x=(1-i)*(1-i)*pt0.x+2*i*(1-i)*pt1.x+i*i*pt2.x			　 pos_y=(1-i)*(1-i)*pt0.y+2*i*(1-i)*pt1.y+i*i*pt2.y										_speed+=_speedStrong*_gap												if(_scaleOut){					if(_maxScale<0.5){						_scale=Math.max(_maxScale*0.1,_scale+_maxScale*0.01*((_maxScale-_maxScale*0.01*_speed)-_scale))					}else{						_scale=Math.max(_maxScale*0.05,_scale+_maxScale*0.01*((_maxScale-_maxScale*_maxScale*0.015*_speed)-_scale))					}									}else{					_scale=Math.max(_maxScale*0.4,_scale+_maxScale*0.01*((_maxScale-0.01*_speed)-_scale))				}								if(!_scaleAble){					_scale=_maxScale				}												if(_rotationChangeable){										drawParticle(new Point(pos_x,pos_y),5*i)				}else{					if(!_isAirBrush){						drawParticle(new Point(pos_x,pos_y))					}else{						drawParticle(new Point(pos_x,pos_y),Math.random()*360)						drawParticle(new Point(pos_x,pos_y),Math.random()*360)						drawParticle(new Point(pos_x,pos_y),Math.random()*360)						drawParticle(new Point(pos_x,pos_y),Math.random()*360)					}									}			　　}		}		//------------------------------------------------------------------------------------------------------------------drawPartricle		private function drawParticle(__p:Point,__r:Number=0){			_matrix.tx=__p.x			_matrix.ty=__p.y				_colorTrans.alphaMultiplier=0.9								_drawObject.scaleX=_drawObject.scaleY=_scale									_eraseObject.scaleX=_eraseObject.scaleY=_drawObject.scaleX									_drawObject.rotation=__r			_eraseObject.rotation=__r			//_drawObject.scaleX=_drawObject.scaleY=Math.max(0.1,_drawObject.scaleX-0.001*_speed)						if(_texture){				_bitmapData.draw(_drawParticle,_matrix,null,null,null,true)							_bitmapData.draw(_eraseParticle,_matrix,null,BlendMode.ERASE,null,true)				_bitmapData.copyPixels(_texture, _bitmapData.rect,new Point(),_bitmapData)			}else{				_bitmapData.draw(_drawParticle,_matrix,_colorTrans,null,null,true)							_bitmapData.draw(_eraseParticle,_matrix,null,BlendMode.ERASE,null,true)			}												//_bitmapData.copyPixels(_paperImg, _bitmapData.rect,new Point(),_bitmapData)						//_bitmapData.draw(_preDrawData)									//_preDrawData.draw(_clearM,null,null,BlendMode.ERASE)						/*var dd:int=Math.floor(100*Math.random())			if(dd==0){				_colorTrans.alphaMultiplier=1					_bitmapData.draw(_hill,_matrix,_colorTrans,null,null,true)									}*/								}		public function set _IsAirBrush(__set:Boolean){			_isAirBrush=__set		}		public function set DrawObject(__set:DisplayObject){			_drawObject=__set as Sprite			//_drawObject.x=0			//_drawObject.y=0						var _n:int=_drawParticle.numChildren;			for(var i:int=0;i<_n;i++){				_drawParticle.removeChildAt(0)			}						_drawParticle.addChild(_drawObject)				_drawPoint.addChild(_drawParticle)						_drawObject.scaleX=_drawObject.scaleY=_maxScale						//this.addEventListener(Event.ENTER_FRAME,enterFrameHander)		}		public function set EraseObject(__set:DisplayObject){						if(__set!=null){				_eraseObject=__set as Sprite			}else{				_eraseObject=new Sprite()			}												//_drawObject.x=0			//_drawObject.y=0						var _n:int=_eraseParticle.numChildren;			for(var i:int=0;i<_n;i++){				_eraseParticle.removeChildAt(0)			}						_eraseParticle.addChild(_eraseObject)										//this.addEventListener(Event.ENTER_FRAME,enterFrameHander)		}		//--------------------------------------------------------------------------enterFrame----		private function enterFrameHander(event:Event){				_drawPoint.x=mouseX				_drawPoint.y=mouseY										//TweenLite.to(_drawPoint,0.2,{scaleX:1*Math.random(),scaleY:1*Math.random(),x:mouseX-150*Math.random()+25,y:mouseY-150*Math.random()+25,rotation:360*Math.random()})																if(_drawing&&Available){					drawing()									//_bitmapData.applyFilter(_bitmapData, _bitmapData.rect, new Point(), new BlurFilter(15, 15, 3));												//_bitmapData.scroll(GlobalVar._moveSpeed,0)					//scaleIt()				}						}				public function scaleIt(){			_cloneBitMapData=_bitmapData.clone()			clearDrawing()						var _matrix:Matrix=new Matrix						_matrix.scale(0.92,0.92)									_bitmapData.draw(_cloneBitMapData,_matrix)		}				public function set W(__set:Number){			_w=__set		}		public function get W():Number{			return _w		}		public function set H(__set:Number){			_h=__set		}		public function get H():Number{			return _h		}		public function get Scale():Number{			return _drawObject.scaleX		}		public function set Scale(__set:Number){			_drawObject.scaleX=_drawObject.scaleY=__set		}		public function set _MaxScale(__set:Number){						_maxScale=Math.max(0.05,__set)			_drawObject.scaleX=_drawObject.scaleY=_maxScale		}		public function get _MaxScale():Number{			return _maxScale		}		public function clearDrawing(){			if(_bitmapData){				_bitmapData.draw(_clearM,null,null,BlendMode.ERASE)			}					}		public function set Available(__set:Boolean){			_available=__set		}		public function get Available():Boolean{			return _available		}		public function set Style(__set:String){			_style=__set					}				public function set _RotationChangeable(__set:Boolean){			_rotationChangeable=__set		}		public function set _Paper(__set){			_paper=__set		}		public function set _Clearable(__set:Boolean){			_clearable=__set		}		public function set _Size(__set:Number){			_size=__set		}		public function get _Size():Number{			return _size;		}		public function set _Color(__set:Number){			_color=__set			_colorTrans.color=__set					}		public function set _GlowColor(__set:Number){			if(_glowFilter.blurX==0){				_bitmap_draw.blendMode=BlendMode.NORMAL				return			}else{				_glowFilter.color=_color				_bitmap_draw.filters=[_glowFilter]			}		}		public function set _Alpha(__set:Number){			_alpha=__set			if(_alpha<=0.1){				_alpha=0.1			}			_alphaTrans.alphaMultiplier=_alpha			_bitmap_draw.transform.colorTransform=_alphaTrans		}		public function _glowingBlur(__blur:Number,__alpha:Number=0.5){			if(__blur==0){				_bitmap_draw.filters=[]				_bitmap_draw.blendMode=BlendMode.NORMAL				return			}			_glowFilter.blurX=_glowFilter.blurY=__blur			_glowFilter.alpha=__alpha						_bitmap_draw.blendMode=BlendMode.ADD			_bitmap_draw.filters=[_glowFilter]		}		public function get _Alpha():Number{			return _alpha		}		public function set _ScaleAble(__set:Boolean){			_scaleAble=__set		}		public function set _ScaleOut(__set:Boolean){			_scaleOut=__set		}				//---------------end----	}	}import flash.display.Spriteclass drawSprite extends Sprite{	public function drawSprite(){				this.graphics.beginFill(GlobalVar._color)		graphics.drawCircle(0,0,20)		graphics.endFill()	}		}