package com.douban.app {    import flash.display.Sprite;    import flash.utils.setTimeout;    import flash.external.ExternalInterface;    import flash.events.MouseEvent;    import flash.net.SharedObject;    import flash.net.LocalConnection;    import fl.transitions.easing.Regular;    import cn.asarea.tool.ToolTip;    import com.adobe.serialization.json.JSON_as;    import com.douban.media.DBRadio;    import com.douban.event.ProgressEvent;    import com.douban.event.SeekEvent;    import com.douban.event.SongEvent;    import com.douban.event.ChooseEvent;    import com.douban.event.ListEvent;    import com.douban.utils.Format;    import com.douban.display.RadioCover;    import com.douban.display.ScrollText;    import com.douban.utils.Logger;    import com.douban.utils.Motion;    import flash.events.Event;    public class DoubanRadio extends Sprite{        private var radio:DBRadio;        private var lg:Logger;        private var cover:RadioCover;        private var canAct:Boolean = false;        private var anonyMode:Boolean = true;        private var channel:String;        private var so:SharedObject;        private var context:String;        private var songTxt:ScrollText;        private var playingAd:Boolean = false;        private var conn:LocalConnection;		private var _defaultChannel:int=198        public function DoubanRadio() {         	if(stage){				_setup()			}else{				this.addEventListener(Event.ADDED_TO_STAGE,stageHander) 			}	        }				private function stageHander(event:Event){			_setup()		}		private function _setup(){			//stage.scaleMode = flash.display.StageScaleMode.NO_SCALE;            //stage.align = flash.display.StageAlign.TOP_LEFT;            ToolTip.stage = stage;            so = SharedObject.getLocal('douban_radio','/');            var param = root.loaderInfo.parameters;            var host = param['host'] || 'http://douban.fm';            anonyMode = !(param['uid'] && param['uid'] != '0');            context = param['context'] || '';            lg = new Logger('DBR.rlog', host);            radio = new DBRadio(host, context, lg);            radio.addEventListener(ProgressEvent.PROGRESS, onProgress);            radio.addEventListener(SongEvent.SONG_EVENT, onSongEvent);            radio.addEventListener(ListEvent.LISTEVENT, onListEvent);            fwdBtn.addEventListener(MouseEvent.CLICK, onSkipClick);            likeBtn.addEventListener(MouseEvent.CLICK, onLikeClick);            badBtn.addEventListener(MouseEvent.CLICK, onBanClick);            pauseArea.addEventListener(MouseEvent.CLICK, onPauseClick);            ToolTip.BindDO(channelBtn, "换台");            ToolTip.BindDO(fwdBtn, "跳过曲目");            ToolTip.BindDO(likeBtn, "我喜欢");            ToolTip.BindDO(badBtn, "不再播放");            ToolTip.BindDO(pauseArea, "暂停");            tipAnonyLove.closeBtn.buttonMode = true;            tipAnonyLove.closeBtn.addEventListener(MouseEvent.MOUSE_UP, function(){tipAnonyLove.y=-300;});            tipAnonyLove.loginBtn.addEventListener(MouseEvent.MOUSE_UP, showLogin);            tipAnonyLove.loginBtn.buttonMode = true;            volControl.addEventListener(SeekEvent.ONSEEK, radio.onAdjustVolume);            cover = new RadioCover(200);            //cover.x = 130;            //cover.y = 348;            _coverC.addChild(cover);            songTxt = new ScrollText(120);            addChildAt(songTxt, 5);            songTxt.x = 50;            songTxt.y =50;            channelBtn.addEventListener(MouseEvent.CLICK, onChannelBtnClick)            channelName.nameTxt.wordWrap = false;            channelName.nameTxt.autoSize = "right";             channelSelector.addEventListener(ChooseEvent.ONCHOOSE, channelSwitch);            channelSelector.anonyMode = anonyMode;            var chan = root.loaderInfo.parameters['channel'];            if (!chan) {                if (so.data.toMyRadioFailed == true){ //logged in or just registered from radio                     delete so.data.toMyRadioFailed;                    so.flush();                    chan = '0';                } else if (so.data.channel) {                    chan = so.data.channel;                } else {                    chan = '0';                }								            }						chan=_defaultChannel			            channelSelector.channel = chan;            stage.addEventListener(MouseEvent.MOUSE_UP,cleanTips);           // ExternalInterface.addCallback('act', extControl);            conn = new LocalConnection();            conn.client = this;            pauseOthers();            radio.start();		}        private function pauseOthers() {            try {                conn.connect('DoubanRadio');            } catch(e) {                lg.log("other radio is playing");                conn.send('DoubanRadio', 'onPauseClick');                setTimeout(pauseOthers, 1000);            }        }        private function extControl(...o) {            var cmd = o.length > 0 ? o[0] : null;            switch(cmd) {                case 'pause':                    onPauseClick();                    break;                                case 'skip':                    onSkipClick();                    break;                case 'love':                    onLikeClick();                    break;                case 'ban':                    onBanClick();                    break;                case 'switch':                    if(o.length > 1) channelSelector.channel = o[1];                    break;            }        }        private function channelSwitch(e) {            var chan = e.value.channel;            if (radio.channel != chan) {                so.data.history = '';                so.flush();            }            channelName.nameTxt.text =                 chan == '0'? '私人频道' :                 chan == '16' ? e.value.name + ' MHz' :                e.value.name + 'MHz';            channelName.back.width = channelName.nameTxt.width + 4;            channelName.back.x = channelName.nameTxt.x - 1;						chan=_defaultChannel            radio.channel = chan;			//---------------------			//radio.channel=19;			trace("channel-----------",radio.channel)            if (chan == 0) {                badBtn.disabled = false;                ToolTip.setDOInfo(badBtn, "不再播放");            } else {                badBtn.disabled = true;                ToolTip.setDOInfo(badBtn, "私人频道可用");            }        }        private function onChannelBtnClick(e) {            channelSelector.alpha = 0;            channelSelector.y = 11;            var fadeInMo = new Motion(channelSelector, "alpha", Regular.easeOut, 0, 1, 8);            fadeInMo.play();        }        private function onSkipClick(...e) {            if (fwdBtn.disabled) return;            if (canAct) canAct = false else return;            radio.skip();        }        public function onPauseClick(...e) {            if (!canAct) return;            if(pauseArea.selected) {                radio.resume();                pauseArea.selected = false;                ToolTip.BindDO(pauseArea, "暂停");               // volControl.x = 394;                pauseOthers();            } else {                radio.pause();                pauseArea.selected = true;                ToolTip.LooseDO(pauseArea);               // volControl.x = 600;                conn.close();            }        }        private function onLikeClick(...e) {            if (likeBtn.disabled || playingAd) return;            if (radio.isLiked) {                radio.unlike();                likeBtn.selected = false;                ToolTip.setDOInfo(likeBtn, "我喜欢");            } else {                radio.like();                likeBtn.selected = true;                ToolTip.setDOInfo(likeBtn, "取消喜欢");            }            if (anonyMode) {                tipAnonyLove.y = 85;                var showMo = new Motion(tipAnonyLove,"alpha",Regular.easeOut,0,1,8);                showMo.play();            }        }        private function onBanClick(...e) {            if (badBtn.disabled || playingAd) return;            if (canAct) canAct = false else return;            radio.ban();        }        private function onProgress(e){           timeTxt.text = Format.msFormat(e.progress);        }        private function showLogin(e):void        {            ExternalInterface.call('DBR.show_login');            e.stopPropagation();        }        private function onSongEvent(e) {            var d = e.data, song = d.song;            if (d.type == DBRadio.START) {                radio.volume = volControl.volume;                songTxt.text = song.title;                artistTxt.text = ' - '+ song.artist;                playingAd = song.subtype === DBRadio.ADTYPE;               // artistTxt.x = songTxt.x + songTxt.textWidth;                artistTxt.width = 182 - songTxt.textWidth;                cover.showPicture(song.picture);                cover.clickUrl = song.album;                ToolTip.setDOInfo(cover, song.albumtitle);                likeBtn.selected = song.like;                ToolTip.setDOInfo(likeBtn, song.like ? '取消喜欢':'我喜欢');                canAct = true;            }            ExternalInterface.call('extStatusHandler', JSON_as.encode(d));        }        private function onListEvent(e) {            if (e.message['error']) {                songTxt.text = e.message['msg'];                artistTxt.text = '';                canAct = true;            }        }        private function cleanTips(e)        {            tipAnonyLove.y = -300;            volControl.hideMain();        }    }}