package  {	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.text.Font	import flash.text.TextField;	import flash.text.TextFormat;	import flash.external.ExternalInterface	import flash.system.LoaderContext;	import flash.utils.getDefinitionByName;	public class FontLibrary extends MovieClip{		static private var _self:FontLibrary		private var _fontName:String=""		private var _loader:Loader=new Loader()				public function FontLibrary() {			_self=this			var a:Array = Font.enumerateFonts(false);			trace(a)			for(var i:int=0;i<a.length;i++){				trace(a[i].fontName)							}		}		static public function get _Libary():FontLibrary{			if(!_self){				_self=new FontLibrary()			}			return _self		}		public function setFont(__text:TextField,__fontName:String=""){			if(__fontName==""){				__fontName=_fontName			}			var _textF:TextFormat=new TextFormat()			__text.embedFonts=true			_textF.font=__fontName			__text.defaultTextFormat=_textF			__text.setTextFormat(_textF)			trace("--set font",__fontName)		}		public function fontIn(__set:String){			var _urlR:URLRequest=new URLRequest(__set)						//var _urlR:URLRequest=new URLRequest(_localUrl)			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE,fontHander)			_loader.load(_urlR,new LoaderContext(true))		}		public function get _byteTotal():Number{			//trace(Math.max(100,_loader.contentLoaderInfo.bytesTotal))			//trace(_loader.contentLoaderInfo.bytesTotal)			return Math.max(100000,_loader.contentLoaderInfo.bytesTotal)		}		public function get _byteLoaded():Number{			return _loader.contentLoaderInfo.bytesLoaded		}		private function fontHander(event:Event){			var fontLibrary:Class = event.target.applicationDomain.getDefinition("MyFont") as Class;			trace(fontLibrary)			var a:Array = Font.enumerateFonts(false);			trace(a)			for(var i:int=0;i<a.length;i++){				trace(a[i].fontName)							}			_fontName=a[a.length-1].fontName;			trace(_fontName)			this.dispatchEvent(new Event("in"))		}			}	}