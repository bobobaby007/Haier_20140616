package com.douban.display{	import flash.display.MovieClip;	import flash.net.SharedObject;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.utils.setTimeout;	import flash.utils.clearTimeout;	import fl.transitions.easing.*;	import flash.utils.Timer;	import com.douban.utils.Motion;	import com.douban.event.SeekEvent;	public class VolumeControl extends MovieClip	{		public var volume;		protected var maxWidth;		protected var mySo:SharedObject;		private var isDragging = false;		private var showControl = false;		private var hideTimeout;		private var timer;		public function VolumeControl()		{			m.controller.addEventListener(MouseEvent.MOUSE_DOWN,controllerDown);			m.controller.addEventListener(MouseEvent.MOUSE_UP, controllerUp);			m.controller.buttonMode = true;			maxWidth = m.volStick.width;			mySo = SharedObject.getLocal('mp3player','/');			if (mySo.data.volume != undefined) {				setVolume(mySo.data.volume);			} else {				setVolume(1);			}			m.volHandler.addEventListener(MouseEvent.MOUSE_DOWN, onStartDrag);			m.volHandler.addEventListener(MouseEvent.MOUSE_UP, onStopDrag);			m.volHandler.buttonMode = true;			onLaba.addEventListener(MouseEvent.MOUSE_UP, onLabaClick);			onLaba.buttonMode = true;			timer = new Timer(40);			timer.addEventListener(TimerEvent.TIMER, onTimer);		}		private function onLabaClick(e)		{			e.stopPropagation();			if (showControl) {				hideMain();			} else {				laba.gotoAndStop(102 + int(volume * 100));				//m.x = -70;				m.alpha = 1;				delayToHide();				showControl = true;			}		}		public function hideMain()		{			if (! showControl) {				return;			}			if (isDragging) {				delayToHide();				return;			}			laba.gotoAndStop(1 + int(volume * 100));			new Motion(m,"alpha",Regular.easeOut,1,0,10).play(function(){m.alpha = 1;});			showControl = false;		}		private function delayToHide()		{			if (hideTimeout) {				clearTimeout(hideTimeout);			}			hideTimeout = setTimeout(hideMain,5000);		}		private function onStartDrag(e)		{			delayToHide();			if (isDragging) {				return;			}			var rect = new Rectangle(m.volStick.x,m.volStick.y + 2,m.volStick.width,0);			m.volHandler.startDrag(false, rect);			isDragging = true;			timer.start();		}		private function onTimer(e)		{			if (m.controller.mouseX <= 0 || m.controller.mouseX >= m.controller.width			   || m.controller.mouseY <= 0 || m.controller.mouseY >= m.controller.height) {				trace('stop drag');				onStopDrag(e);				timer.stop();			} else {				setVolume((m.volHandler.x - m.volStick.x) / maxWidth);			}		}		private function onStopDrag(e)		{			e.stopPropagation();			delayToHide();			m.volHandler.stopDrag();			setVolume((m.volHandler.x - m.volStick.x) / maxWidth);			isDragging = false;		}		private function controllerDown(e)		{			setVolume((m.controller.x - m.volStick.x + m.controller.mouseX) / maxWidth);		}		private function controllerUp(e)		{			onStopDrag(e);		}		public function setVolume(vol)		{			if (vol > 1) {				vol = 1;			}			if (vol < 0) {				vol = 0;			}			var seekEv = new SeekEvent  ;			seekEv.percent = vol;			dispatchEvent(seekEv);			volume = vol;			m.volHandler.x = m.volStick.x + maxWidth * vol;			laba.gotoAndStop((showControl?102:1) + int(vol * 100));			mySo.data.volume = vol;			mySo.flush();		}	}}