//autor: Bob.Huangpackage AsPreloader{	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Point;	import flash.utils.Timer;	import flash.events.TimerEvent;	public class Preloader extends MovieClip {		private var _mainM:Sprite=new Sprite  ;		private var _radius:Number=5;		private var _subRadius:Number=2;		private var _toBiger:int=1;		private var _subNum:int=12;		private var _currentNo:int=0;		private var _rotation:Number=-1;		private var _rotation2:int=1;		private var _style:int=0;		private var _currentSet:int=0;		private var _currentValue:uint=0;		private var _colorAdd:int=1;		private var _RGB:Array=[100,100,100];		public function Preloader() {			subsIn();			setPosition();			changeSubPart();			_mainM.addEventListener(Event.ENTER_FRAME,enterFrameHander);			addChild(_mainM);		}		private function subsIn() {			var n:int=_mainM.numChildren;			for (var t:int=0; t<n; t++) {				_mainM.removeChildAt(0);			}			for (var i:int=0; i<_subNum; i++) {				var newSub:subPart=new subPart();				_mainM.addChild(newSub);			}		}		private function setPosition($Rotation:Number=0) {			for (var i:int=0; i<_mainM.numChildren; i++) {				var newSub=_mainM.getChildAt(i);				var newP:Point;				if ($Rotation==0) {					newP=Point.polar(2*_radius,_rotation2*i*(2*Math.PI/_subNum));				} else {					newP=Point.polar(2*$Rotation,$Rotation*i*(2*Math.PI/_subNum));				}				newSub.x=newP.x;				newSub.y=newP.y;			}		}		private function enterFrameHander(event:Event) {			changeSubPart();		}		private function changeSubPart() {			switch (_style) {				case 1 :					style1();					break;				case 2 :					style2();					break;				case 3 :					style3();					break;				case 4 :					style4();					break;				case 5 :					style5();					break;				case 6 :					style6();					break;				case 7 :					style7();					break;				case 8 :					style8();					break;				default :					style0();					break;			}		}		//----------------------styles-------------------------		private function style0() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;			}			_mainM.rotation+=_rotation;			for (var i:int=0; i<_mainM.numChildren; i++) {				if (i==_currentNo) {					_mainM.getChildAt(i).alpha=1;				} else {					_mainM.getChildAt(i).alpha=0.4;				}			}		}		private function style1() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;			}			_mainM.rotation+=_rotation;			for (var i:int=0; i<_mainM.numChildren; i++) {				var sub=_mainM.getChildAt(i);				sub.setColor(Math.random()*0xffffff);				if (i==_currentNo) {					sub.alpha=1;				} else {					sub.alpha=0.4;				}			}		}		private function style2() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;				_toBiger=- _toBiger;			}			for (var i:int=0; i<_mainM.numChildren; i++) {				var sub=_mainM.getChildAt(i);				if (i==_currentNo) {					sub.alpha=1;				} else {					sub.alpha=0.4;				}			}			setRadius(_toBiger*0.02*(_mainM.numChildren-_currentNo)+_radius);			_mainM.rotation+=_rotation;		}		private function style3() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;			}			for (var i:int=0; i<_mainM.numChildren; i++) {				var sub=_mainM.getChildAt(i);				var newP:Point=Point.polar(2*_radius,_rotation2*i*(2*Math.PI/_subNum));				if (i==_currentNo) {					sub.alpha=1;					newP.normalize(2*_radius+2*_subRadius);				} else {					sub.alpha=1;				}				sub.x=newP.x;				sub.y=newP.y;			}			_mainM.rotation+=_rotation;		}		private function style4() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;			}			for (var i:int=0; i<_mainM.numChildren; i++) {				var sub=_mainM.getChildAt(i);				if (i==_currentNo) {					sub.alpha=1;				} else {					var distance:int=Math.abs(i-_currentNo);					if (distance>0.5*_mainM.numChildren) {						distance=0.5*_mainM.numChildren-(distance-0.5*_mainM.numChildren);					}					sub.alpha=1-2*distance/(_mainM.numChildren-1);				}			}			_mainM.rotation+=_rotation;		}		private function style5() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;			}			for (var i:int=0; i<_mainM.numChildren; i++) {				var sub=_mainM.getChildAt(i);				if (i==_currentNo) {					sub.alpha=1;					sub.scaleX=sub.scaleY=1;				} else {					var distance:int=Math.abs(i-_currentNo);					if (distance>0.5*_mainM.numChildren) {						distance=0.5*_mainM.numChildren-(distance-0.5*_mainM.numChildren);					}					sub.alpha=1-2*distance/(_mainM.numChildren-1);					sub.scaleX=sub.scaleY=1-2*distance/(_mainM.numChildren-1);				}			}			_mainM.rotation+=_rotation;		}		private function style6() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;			}			for (var i:int=0; i<_mainM.numChildren; i++) {				var sub=_mainM.getChildAt(i);				if (i==_currentNo) {					sub.alpha=1;				} else {					sub.alpha=0.4;				}			}			_currentValue+=_colorAdd*10;			if (_currentValue>255||_currentValue<20) {				_colorAdd=- _colorAdd;				_currentSet=Math.floor(Math.random()*2);				_currentValue=_RGB[_currentSet];			}			_RGB[_currentSet]=_currentValue			;			var str:String="0x";			str+=_RGB[0].toString(16);			str+=_RGB[1].toString(16);			str+=_RGB[2].toString(16);			setColor(str);			_mainM.rotation+=_rotation;		}		private function style7() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;			}			_currentValue+=_colorAdd*10;			if (_currentValue>255||_currentValue<20) {				_colorAdd=- _colorAdd;				_currentSet=Math.floor(Math.random()*2);				_currentValue=_RGB[_currentSet];			}			_RGB[_currentSet]=_currentValue;			for (var i:int=0; i<_mainM.numChildren; i++) {				var sub=_mainM.getChildAt(i);				var str:String="0x";				str+=_RGB[0].toString(16);				str+=_RGB[1].toString(16);				str+=_RGB[2].toString(16);				if (i==_currentNo) {				} else {					var distance:int=Math.abs(i-_currentNo);					if (distance>0.5*_mainM.numChildren) {						distance=0.5*_mainM.numChildren-(distance-0.5*_mainM.numChildren);					}					var Dvalue=16*16*16*distance;					str="0x"+(uint(str)-Dvalue).toString(16);				}				sub.setColor(str);				sub.alpha=1;			}			_mainM.rotation+=_rotation;		}		private function style8() {			_currentNo+=1;			if (_currentNo>=_mainM.numChildren) {				_currentNo=0;			}			_currentValue+=_colorAdd*10;			if (_currentValue>255||_currentValue<20) {				_colorAdd=- _colorAdd;				_currentSet=Math.floor(Math.random()*2);				_currentValue=_RGB[_currentSet];			}			_RGB[_currentSet]=_currentValue;			for (var i:int=0; i<_mainM.numChildren; i++) {				var sub=_mainM.getChildAt(i);				var str:String="0x";				str+=_RGB[0].toString(16);				str+=_RGB[1].toString(16);				str+=_RGB[2].toString(16);				if (i==_currentNo) {					sub.scaleX=sub.scaleY=1				} else {					var distance:int=Math.abs(i-_currentNo);					if (distance>0.5*_mainM.numChildren) {						distance=0.5*_mainM.numChildren-(distance-0.5*_mainM.numChildren);					}					var Dvalue=16*16*16*distance;					//str="0x"+(uint(str)-Dvalue).toString(16);					sub.scaleX=sub.scaleY=1-2*distance/(_mainM.numChildren-1);				}				sub.setColor(str);				sub.alpha=1;			}			_mainM.rotation+=_rotation;		}		//--------------------------------------------------------		public function setColor($color) {			for (var i:int=0; i<_mainM.numChildren; i++) {				var _sub=_mainM.getChildAt(i);				_sub.setColor($color);			}		}		public function setRadius($radius:Number) {			_radius=$radius;			setPosition();		}		public function setSubRadius($radius:Number) {			_subRadius=$radius;			for (var i:int=0; i<_mainM.numChildren; i++) {				var _sub=_mainM.getChildAt(i);				_sub.setRadius(_subRadius);			}		}		public function setNumber($number:Number) {			_mainM.removeEventListener(Event.ENTER_FRAME,enterFrameHander);			_subNum=$number;			subsIn();			setPosition();			_mainM.addEventListener(Event.ENTER_FRAME,enterFrameHander);		}		public function setRotation($rotation:Number) {			_rotation=$rotation;		}		public function reverse() {			_rotation2=- _rotation2;			setPosition();		}		public function setStyle($style) {			_style=$style;		}	}}import flash.display.Sprite;import flash.display.Graphics;class subPart extends Sprite {	private var _radius:Number=2;	private var _color:Number=0xffffff;	public function subPart() {		drawIt();	}	private function drawIt() {		graphics.clear();		graphics.beginFill(_color);		graphics.drawCircle(0,0,_radius);		graphics;		graphics.endFill();	}	public function setColor($color:uint) {		_color=$color;		drawIt();	}	public function setRadius($radius:Number) {		_radius=$radius;		drawIt();	}}