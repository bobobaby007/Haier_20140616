package  {	import flash.display.MovieClip		import flash.events.Event;	import flash.display.DisplayObject;	import flash.events.MouseEvent;	import flash.display.BlendMode	import flash.geom.Point	import flash.geom.Rectangle;		public class DrawBoardContainer extends MovieClip{		public var _drawBoard:DrawBoard=new DrawBoard()		static public var _self:DrawBoardContainer		private var _isTop:Boolean=false				private var _mouse:MouseM		private var _hasMouse:Boolean=false										public function DrawBoardContainer() {			_self=this			setup()		}		public function setup(){																							addChild(_drawBoard)							//addChild(_htc_mc)			_mouse=new MouseM()			addChild(_mouse)						_drawBoard.setup()			_drawBoard._Available=true			_drawBoard.blendMode=BlendMode.ERASE			_Alpha=1			_Scale=0.5						_Color=0x00ffff			this.addEventListener(Event.ENTER_FRAME,enterFrameHander)			this._Style=11			//this._IsErase=true						//this._Available=false		}		public function set _EditeType(__type:String){			switch(__type){				case "hand":					_drawBoard.visible=true					KeyBoardInputer._self._reset()					KeyBoardInputer._self.visible=false				break				case "keyboard":					_drawBoard.visible=false					KeyBoardInputer._self._reset()					KeyBoardInputer._self._setFocusIn()					KeyBoardInputer._self.visible=true				break			}		}		private function enterFrameHander(event:Event){			_mouse.x=mouseX			_mouse.y=mouseY						if(mouseX>0&&mouseX<GlobalVar._mainWidth&&mouseY>0&&mouseY<GlobalVar._mainHeight){				if(_hasMouse){					_mouse.visible=true				}							}else{				_mouse.visible=false			}					}		public function set _mouseTarget(__set:DisplayObject){			_mouse._target=__set					_hasMouse=true			_mouse.Target=__set			_drawBoard._Available=false							stage.addEventListener(MouseEvent.MOUSE_DOWN,mouseDownHander)						_Alpha=_drawBoard._paper._Alpha		}		private function mouseDownHander(event:MouseEvent){					var _p:Point=new Point(mouseX,mouseY)			_p=this.localToGlobal(_p)			if(!_drawBoard.hitTestPoint(_p.x,_p.y)){				return			}						_drawBoard._paper._printObject(_mouse)					}		public function _clearMouse(){			_hasMouse=false						_drawBoard._Available=true			if(stage){				stage.removeEventListener(MouseEvent.MOUSE_DOWN,mouseDownHander)			}					}			public function set _Color(__set:Number){			_mouse._Color=__set			_drawBoard._Color=__set						_Alpha=_drawBoard._paper._Alpha		}		public function set _Scale(__set:Number){			_mouse._Scale=__set			_drawBoard._Scale=__set			}		public function set _Alpha(__set:Number){			_mouse._Alpha=__set			_drawBoard._Alpha=__set			}		public function set _IsErase(__set:Boolean){			_drawBoard._IsErase=__set		}		public function set _Style(__set:int){			trace(__set)			_clearMouse()			_drawBoard._Style=__set		}		public function _Clear(){			_drawBoard._paper._clear()					}		public function set _Available(__set:Boolean){			_drawBoard._Available=__set					}		public function _Back(){			_drawBoard._Back()		}		public function _Forward(){			_drawBoard._Forward()		}		public function get _HasDrawed():Boolean{			return _drawBoard._HasDrawed		}	}	}