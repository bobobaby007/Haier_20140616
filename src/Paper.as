package  {	import flash.display.MovieClip		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.BlendMode		import flash.geom.Matrix;	import flash.geom.Point	import flash.filters.DisplacementMapFilterMode;    import flash.filters.DisplacementMapFilter;	import flash.filters.BlurFilter;	import flash.geom.ColorTransform;	import flash.filters.GlowFilter;		import gs.TweenLite	import flash.utils.ByteArray;	public class Paper extends MovieClip{		static public const  STYLE_NORMAL:String="STYLE_NORMAL"		static public const  STYLE_WATERCOLOUR:String="STYLE_WATERCOLOUR"		static public const  STYLE_LANDSCOLOUR:String="STYLE_LANDSCOLOUR"		static public const  STYLE_WRITEBRUSH:String="STYLE_WRITEBRUSH"		static public const  STYLE_AIRBRUSH:String="STYLE_AIRBRUSH"				public var _historyNum:int=20				private var _isErase:Boolean=false				private var _width:Number=600		private var _height:Number=1124		private var _boardData:BitmapData		private var _boardMap:Bitmap		private var _cacheData:BitmapData		private var _cacheMap:Bitmap		private var _target:DisplayObject		private var _clearMc:Sprite=new Sprite				private var map:BitmapData				private var _style:String=STYLE_NORMAL				private var _targets:Array=new Array()				private var _backGround:Sprite=new Sprite		private var _drawMain:Sprite=new Sprite				private var _available:Boolean=false				private var _cloneData:BitmapData				private var _otherData:BitmapData				private var _brushColor:Number=0xff0000		private var _colorTrans:ColorTransform=new ColorTransform()				private var _alpha:Number=1		private var _alphaTrans:ColorTransform=new ColorTransform()				static public var _paper:Paper						static public var _outOfStage:Boolean=false				private var _historyDatas:Array=[]		public var _currentHis:int=1		private var _num:int=0				public function Paper() {			_paper=this		}		public function setup(__w:Number=1124,__h:Number=600){			_width=__w			_height=__h			_cacheData=new BitmapData(_width,_height,true,0x00000000)			_boardData=new BitmapData(_width,_height,true,0x00000000)						_boardMap=new Bitmap(_boardData)			_boardMap.smoothing=true			_cacheMap=new Bitmap(_cacheData)			_cacheMap.smoothing=true						_drawMain.addChild(_boardMap)			_drawMain.addChild(_cacheMap)									//_backGround.graphics.beginFill(0x000000)			//_backGround.graphics.drawRect(0,0,_width,_height)			//_backGround.graphics.endFill()						//addChild(_backGround)			addChild(_drawMain)						//_drawMain.blendMode=BlendMode.ALPHA			//this.blendMode=BlendMode.LAYER											 	map = new BitmapData(_width, _height);			map.perlinNoise(100, 100,3,Math.random()*100,true, true, 1, true);										this.addEventListener(Event.ADDED_TO_STAGE,stageHander)			_clearMc.graphics.beginFill(0xffffff)			_clearMc.graphics.drawRect(0,0,__w,__h)			_clearMc.graphics.endFill()						_Style=STYLE_NORMAL						var _hisData:BitmapData=new BitmapData(_width,_height,true,0x00000000)			_historyDatas.push(_hisData)									//_Style=STYLE_WATERCOLOUR		}		private function stageHander(event:Event){			stage.addEventListener(MouseEvent.MOUSE_DOWN,mouseHander)					}		private function mouseHander(event:MouseEvent){			switch(event.type){				case MouseEvent.MOUSE_DOWN:					var _p:Point=new Point(mouseX,mouseY)					_p=this.localToGlobal(_p)					if(!_boardMap.hitTestPoint(_p.x,_p.y)){						return					}										this.addEventListener(Event.ENTER_FRAME,enterFrameHander)					stage.addEventListener(MouseEvent.MOUSE_UP,mouseHander)									break				case MouseEvent.MOUSE_UP:										this.removeEventListener(Event.ENTER_FRAME,enterFrameHander)					stage.removeEventListener(MouseEvent.MOUSE_UP,mouseHander)										if(!_isErase){												_print(_cacheMap,false,true)					}else{						saveHistory()					}					_cacheData.draw(_clearMc,null,null,BlendMode.ERASE)									break			}					}		private function saveHistory(){						var _hisData:BitmapData=_boardData.clone()			if(_historyDatas.length>_currentHis){				_historyDatas.splice(_currentHis)			}						_historyDatas.push(_hisData)			//_historyDatas.push(_num)			_num+=1			if(_historyDatas.length>_historyNum){				_historyDatas.shift()			}			_currentHis=_historyDatas.length					}		private function enterFrameHander(event:Event){						if(_targets.length<1||!_available){				return			}			for(var i:int=0;i<_targets.length;i++){								_draw(_targets[i])				if(_isErase){					_print(_cacheMap,true)				}							}											}				public function set _Style(__set:String){			_style=__set			switch(_style){				case STYLE_NORMAL:					_cacheMap.filters=[]				break				case STYLE_WATERCOLOUR:							_cacheMap.filters=[]					//_cacheMap.filters=[new DisplacementMapFilter(map, new Point(), 1, 1, 64, 64, DisplacementMapFilterMode.CLAMP)]				break				case STYLE_LANDSCOLOUR:										_cacheMap.filters=[new DisplacementMapFilter(map, new Point(), 1, 1,Math.random()*100, 64, DisplacementMapFilterMode.CLAMP)]				break				case STYLE_WRITEBRUSH:					_cacheMap.filters=[]					//_cacheMap.filters=[new DisplacementMapFilter(map, new Point(), 1, 1,2, 64, DisplacementMapFilterMode.CLAMP)]				break				case STYLE_AIRBRUSH:					_cacheMap.filters=[]					//_cacheMap.filters=[new DisplacementMapFilter(map, new Point(), 1, 1,2, 64, DisplacementMapFilterMode.CLAMP)]				break			}		}		public function set _Target(__set:DisplayObject){			_target=__set		}		public function set _Targets(__targets:Array){			_targets=__targets		}				public function _draw(__target:DisplayObject){			_cacheData.draw(__target,null,_alphaTrans,null,null,true)			switch(_style){				case STYLE_NORMAL:					_cacheData.draw(__target,null,_alphaTrans,null,null,true)				break				case STYLE_WATERCOLOUR:										//_cacheData.colorTransform(_cacheData.rect,new ColorTransform(1,1,1,0.9,0,0,0,0))					_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(5, 5, 1));					//_cacheData.scroll(0,2)					//_cacheData.colorTransform(_cacheData.rect,new ColorTransform(1,1,1,0.98,0,0,0,0))					_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new GlowFilter(0x00,0.1,10,10,2,1,false));									break				case STYLE_LANDSCOLOUR:										_cloneData=_cacheData.clone()					_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(22, 22, 1));					_cacheData.draw(_cloneData,null,new ColorTransform(1,1,1,0.05,0,0,0,5),null,null,true)						return																_cloneData=_cacheData.clone()					_cloneData.threshold(_cloneData,_cloneData.rect,new Point(),"<=",0x90000000,0x00000000)										_cloneData.threshold(_cloneData,_cloneData.rect,new Point(),">=",0xee000000,0xff000000)															_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(10,10, 1));													_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new GlowFilter(0x00,0.1,10,10,2,1,false));																_cacheData.colorTransform(_cacheData.rect,new ColorTransform(1,1,1,0.8,0,0,0,0))										_cacheData.draw(_cloneData,null,new ColorTransform(1,1,1,0.3,0,0,0,50),null,null,true)								//_cacheData.draw(_cloneData,null,new ColorTransform(1,1,1,0.5,0,0,0,0),null,null,true)										_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(8, 8, 1));															_cacheData.draw(_cloneData,null,new ColorTransform(1,1,1,0.8,0,0,0,0),null,null,true)										_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(12, 12, 1));										//_cacheData.scroll(0,1)				break				case STYLE_WRITEBRUSH:											_cacheData.draw(_clearMc,null,null,BlendMode.ERASE)													_cacheData.draw(__target,null,null,null,null,true)															_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(3, 3, 1));													_cloneData=_cacheData.clone()										_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new GlowFilter(0x00,0.1,2,2,2,1,false));									_cacheData.draw(_cloneData,new Matrix(1,0,0,1,0,2),new ColorTransform(1,1,1,0.6,0,0,0,100),null,null,true)										_cacheData.colorTransform(_cacheData.rect,new ColorTransform(1,1,1,0.7,0,0,0,0))										_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(2, 2, 1));										//				break				case STYLE_AIRBRUSH:											//_cacheData.draw(_clearMc,null,null,BlendMode.ERASE)													//_cacheData.draw(__target,null,null,null,null,true)								//_cacheData.draw(__target,null,null,null,null,true)								//_cacheData.draw(__target,null,null,null,null,true)								_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(3, 3, 1));													//_cloneData=_cacheData.clone()										//_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new GlowFilter(0x00,0.1,2,2,2,1,false));									//_cacheData.draw(_cloneData,new Matrix(1,0,0,1,0,2),new ColorTransform(1,1,1,0.6,0,0,0,100),null,null,true)										//_cacheData.colorTransform(_cacheData.rect,new ColorTransform(1,1,1,0.7,0,0,0,0))										//_cacheData.applyFilter(_cacheData, _cacheData.rect, new Point(), new BlurFilter(2, 2, 1));										//				break 			}					}		public function _print(__target:DisplayObject,__erase:Boolean=false,__saveHistory:Boolean=false){						if(!_available){				return			}						if(__erase){				_boardData.draw(__target,null,null,BlendMode.ERASE,null,true)			}else{				_boardData.draw(__target,null,null,null,null,true)							}						if(__saveHistory){				saveHistory()			}					}		public function _printObject(__target:DisplayObject){			if(_outOfStage){				return			}			var _p:Point=new Point(__target.x,__target.y)			var _parent:DisplayObject=__target.parent as DisplayObject			_p=_parent.localToGlobal(_p)			_p=this.globalToLocal(_p)			var _matri:Matrix=new Matrix()			_matri.tx=_p.x			_matri.ty=_p.y			_boardData.draw(__target,_matri,null,null,null,true)						saveHistory()								}		public function _clear(){			//_cacheData.draw(_clearMc,null,null,BlendMode.ERASE)						_boardData.draw(_clearMc,null,null,BlendMode.ERASE)			saveHistory()		}		public function set _BackGround(__set:DisplayObject){			//_backGround.addChild(__set)		}		public function set _Available(__set:Boolean){			_available=__set		}		public function get _Available():Boolean{			return _available		}		public function set _IsErase(__set:Boolean){			_isErase=__set			if(_isErase){				_cacheMap.blendMode=BlendMode.ERASE			}else{				_cacheMap.blendMode=BlendMode.NORMAL			}		}		public function get _IsErase():Boolean{			return _isErase					}		public function set _BrushColor(__set:Number){			_brushColor=__set			_colorTrans.color=_brushColor			//_cacheMap.transform.colorTransform=_colorTrans		}		public function get _BrushColor():Number{			return _brushColor		}		public function set _Alpha(__set:Number){			_alpha=__set			if(_alpha<=0.1){				_alpha=0.1			}			_alphaTrans.alphaMultiplier=_alpha		}		public function get _Alpha():Number{			return _alpha		}				public function _Back(){									_currentHis-=1			if(_currentHis<1){				_currentHis=1							}				_boardData.draw(_clearMc,null,null,BlendMode.ERASE)			_boardData.draw(_historyDatas[_currentHis-1])			//trace("----",_historyDatas)		}		public function _Forward(){						_currentHis+=1			if(_currentHis>_historyDatas.length-1){				_currentHis=_historyDatas.length-1			}				_boardData.draw(_clearMc,null,null,BlendMode.ERASE)			_boardData.draw(_historyDatas[_currentHis])			//trace("----",_historyDatas)		}	}	}